apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
def githubPropertiesFile = rootProject.file("github.properties")
def githubProperties = new Properties()
if (githubPropertiesFile.exists()) {
    githubProperties.load(new FileInputStream(githubPropertiesFile))
}
def getVersionName = { ->
    return "1.2.2" // Replace with version Name
}

def getArtificatId = { ->
    return "libsrt" // Replace with library name ID
}

android {
    compileSdkVersion 29
    ndkVersion '21.4.7075529'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            def buildTypeName = variant.buildType.name
            def versionName = android.defaultConfig.versionName
            def newName = "libsrt-${buildTypeName}-${versionName}.aar"
            outputFileName = newName
        }
        variant.getAssembleProvider().get().doLast {
            variant.outputs.all { output ->
                copy {
                    def srcDir = new File(variant.getPackageLibraryProvider().get().getDestinationDir(), output.outputFileName)
                    from "${srcDir}"
                    into "${rootProject.buildDir}/outputs/aar"
                }
            }
        }
    }
    repositories {
        maven {
            name = "DeviceConnect-Android"
            url = uri("https://maven.pkg.github.com/DeviceConnect/DeviceConnect-Android")

            credentials {
                username = System.getenv("GPR_USER") ?: githubProperties['gpr.usr']
                password = System.getenv("GPR_API_KEY") ?: githubProperties['gpr.key']
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.deviceconnect:libmedia:1.2.2'
//    implementation project(':libmedia')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

// 推奨 SRT バージョンを指定します。
def SRT_VERSION = '1.4.1'

// ビルド時に SRT のバージョンチェックを実行します.
// jniLibs に存在する SRT ライブラリのバージョンが指定したものでない場合、ビルドを失敗させます.
task checkVersion(type: VersionCheckTask) {
    requiredVersion = SRT_VERSION
}

tasks.preBuild.dependsOn(checkVersion)

class VersionCheckTask extends DefaultTask {
    File versionFile = new File(project.projectDir, "src/main/jniLibs/include/srt/version.h")
    String requiredVersion

    @TaskAction
    def execute() {
        if (!versionFile.exists()) {
            throw new GradleException("No SRT library is installed.")
        }
        String pattern = '#define SRT_VERSION_STRING "' + requiredVersion + '"'
        if (pattern != versionFile.text.find(pattern)) {
            throw new GradleException("SRT Version must be " + requiredVersion)
        }
    }
}


publishing {
    publications {
        bar(MavenPublication) {
            groupId 'org.deviceconnect'
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release-${getVersionName()}.aar")
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }
            }
        }
    }

    repositories {
        maven {
            name = "libsrt"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/DeviceConnect/DeviceConnect-Android")

            credentials {
                /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}
