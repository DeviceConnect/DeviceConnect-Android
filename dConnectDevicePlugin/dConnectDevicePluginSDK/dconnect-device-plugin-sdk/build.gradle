apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def getVersionName = { ->
    return "2.8.4" // Replace with version Name
}

def getArtificatId = { ->
    return "dconnect-device-plugin-sdk" // Replace with library name ID
}
android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    repositories {
        maven {
            name = "dConnectSDKForAndroid"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/DeviceConnect/DeviceConnect-Android")

            credentials {
                /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}


project.ext {
    if (android.hasProperty('applicationVariants')) {
        androidVariants = android.applicationVariants
    } else {
        androidVariants = android.libraryVariants
    }
}

project.androidVariants.all { variant ->
    task("generateJavadocForPlugin", type: Javadoc, overwrite: true) {
        title = "Device Plug-in SDK for Android"
        description = "Generates Javadoc for $variant.name."
        configurations.implementation.setCanBeResolved(true)
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.implementation
        destinationDir = new File("${project.getRootDir()}/DevicePluginSDK-Javadoc/")

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PROTECTED)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/localoauth/**'
        exclude '**/org/deviceconnect/android/compat/**'
        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/org/restlet/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'org.deviceconnect:dconnect-sdk-for-android:2.3.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.46'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.10.0'
    testImplementation 'org.robolectric:robolectric:3.7.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// プラグインSDKのバージョンをpluginsdk.xmlに反映
task setPluginSDKVersion(type: Copy) {
    from 'src/template/pluginsdk.xml'
    into 'src/main/res/xml'
    expand([
            version: getVersionName()
    ])
}
preBuild.dependsOn setPluginSDKVersion

// DeviceConnect-Specからjsonファイルをダウンロード

def specOutputDir = file("${projectDir}/src/main/assets/")
def specZipFile = ''
def apiDir = new File(specOutputDir, 'api')

task downloadZip(type: SpecDownload) {
    sourceUrl = 'https://github.com/DeviceConnect/DeviceConnect-Spec/archive/master.zip'
    target = file("${projectDir}/master.zip")
    specZipFile = target
}

task unzip(type: Copy) {
    from zipTree(specZipFile)
    into specOutputDir
    exclude '**/README.md'
    exclude '**/LICENSE'
    exclude '**/.DS_Store'
}

task downloadDeviceConnectSpec {
    doLast {
        // zipをダウンロード
        tasks.downloadZip.execute()

        if (!specZipFile.exists()) {
            println 'Failed to download a zip file.'
        } else {
            // assets/api以下を削除
            if (apiDir.exists()) {
                delete(apiDir)
            }

            // zipを解凍
            tasks.unzip.execute()

            // zipを行うと不要なフォルダが作成されてしまうので、削除
            def specRootDir = specOutputDir.listFiles(new FilenameFilter() {
                boolean accept(File dir, String name) {
                    return name.startsWith("DeviceConnect-Spec") && new File(dir, name).isDirectory()
                }
            })[0]
            def apiRootDir = specRootDir.listFiles(new FilenameFilter() {
                boolean accept(File dir, String name) {
                    return "api" == name && new File(dir, name).isDirectory()
                }
            })[0]
            apiRootDir.renameTo(apiDir)

            // 不要になったzipやフォルダを削除
            specRootDir.delete()
            specZipFile.delete()
        }
    }
}

class SpecDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

// apiフォルダが存在しない場合にはDeviceConnect-Specをダウンロード
if (!apiDir.exists()) {
    tasks.downloadDeviceConnectSpec.execute()
}


if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


publishing {
    publications {
        bar(MavenPublication) {
            groupId 'org.deviceconnect'
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }
            }
        }
    }

    repositories {
        maven {
            name = "dConnectDevicePluginSDK"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/DeviceConnect/DeviceConnect-Android")

            credentials {
                /**Create github.properties in root project folder file with gpr.usr=GITHUB_USER_ID  & gpr.key=PERSONAL_ACCESS_TOKEN**/
                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}