apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    def getVersionName = { ->
        def version
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            version = ["cmd", "/c", "git describe --tags --long"].execute().in.text.trim()
        } else {
            version = ["sh", "-c", "git describe --tags --long"].execute().in.text.trim()
        }
        version = version.empty ? "2.1.0" : version
        return "${version}"
    }

    defaultConfig {
        applicationId "org.deviceconnect.android.manager"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "URL_HELP_HTML", "\"file:///android_asset/html/help/index.html\""
        buildConfigField "String", "URL_DEMO_HTML", "\"file:///android_asset/html/demo/index.html\""

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        releaseConfig {
            storeFile=file(project.properties.storeFile)
            storePassword=project.properties.storePassword
            keyAlias=project.properties.keyAlias
            keyPassword=project.properties.keyPassword
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

repositories {
    maven { url 'https://raw.githubusercontent.com/DeviceConnect/DeviceConnect-Android/master/dConnectSDK/dConnectSDKForAndroid/repository/' }
    maven { url 'https://raw.githubusercontent.com/DeviceConnect/DeviceConnect-Android/master/dConnectDevicePlugin/dConnectDevicePluginSDK/repository/' }
    maven { url 'file://' + rootDir + '/../../dConnectSDK/dConnectSDKForAndroid/repository/' }
    maven { url 'file://' + rootDir + '/../../dConnectDevicePlugin/dConnectDevicePluginSDK/repository/' }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation('com.android.support:appcompat-v7:28.0.0') {
        exclude module: 'animated-vector-drawable'
        exclude module: 'support-media-compat'
    }
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'org.deviceconnect:dconnect-sdk-for-android:2.3.0'
    implementation project(':dconnect-manager-core')
    implementation project(':dconnect-device-plugin-sdk')
    implementation project(':dconnect-server-nano-httpd')
    implementation project(':dconnect-device-plugin-host')

    androidTestImplementation('com.android.support.test:runner:1.0.2') {
        exclude module: 'animated-vector-drawable'
        exclude module: 'support-media-compat'
    }
    androidTestImplementation('com.android.support.test:rules:1.0.2') {
        exclude module: 'animated-vector-drawable'
        exclude module: 'support-media-compat'
    }
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

android.testVariants.all { variant ->
    task("generateJavadocForManagerJUnit", type: Javadoc, overwrite: true) {
        title = "Android Device Connect Manager Unit Test"
        description = "Generates Javadoc for JUnit"
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
        destinationDir = new File("${project.getRootDir()}/DeviceConnectManager-JUnit-Javadoc/")

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PUBLIC)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/org/deviceconnect/android/test/**'
        exclude '**/org/deviceconnect/android/test/http/**'
        exclude '**/IntentDConnectTestCase.java'
        exclude '**/RESTfulDConnectTestCase.java'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}