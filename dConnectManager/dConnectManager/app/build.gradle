apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    def getVersionName = { ->
        def version
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            version = ["cmd", "/c", "git describe --tags --long"].execute().in.text.trim()
        } else {
            version = ["sh", "-c", "git describe --tags --long"].execute().in.text.trim()
        }
        version = version.empty ? "2.1.0" : version
        return "${version}"
    }

    defaultConfig {
        applicationId "org.deviceconnect.android.manager"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "URL_HELP_HTML", "\"file:///android_asset/html/help/index.html\""
        buildConfigField "String", "URL_DEMO_HTML", "\"file:///android_asset/html/demo/index.html\""
        manifestPlaceholders = [
                appIcon: "@drawable/icon",
                appName: "@string/app_name"
        ]
        jackOptions {
            enabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        releaseConfig {
            storeFile=file(project.properties.storeFile)
            storePassword=project.properties.storePassword
            keyAlias=project.properties.keyAlias
            keyPassword=project.properties.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
        }
    }
    flavorDimensions "common"
    productFlavors {
        DeviceWebApi {
            dimension "common"
            versionCode 29
            versionName "2.3.0"
            manifestPlaceholders = [
                    appIcon: "@drawable/icon",
                    appName: "@string/app_name"
            ]
            buildConfigField "String", "URL_HELP_HTML", "\"file:///android_asset/html/help-dwa/index.html\""
            buildConfigField "String", "URL_DEMO_HTML", "\"file:///android_asset/html/demo/index.html\""
        }
        things {
            dimension "common"

        }
        main {
            dimension "common"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
repositories {
    maven { url 'https://raw.githubusercontent.com/DeviceConnect/DeviceConnect-Android/master/dConnectSDK/dConnectSDKForAndroid/repository/' }
    maven { url 'https://raw.githubusercontent.com/DeviceConnect/DeviceConnect-Android/master/dConnectDevicePlugin/dConnectDevicePluginSDK/repository/' }
    maven { url 'file://' + rootDir + '/../../dConnectSDK/dConnectSDKForAndroid/repository/' }
    maven { url 'file://' + rootDir + '/../../dConnectDevicePlugin/dConnectDevicePluginSDK/repository/' }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'org.deviceconnect:dconnect-device-plugin-sdk:2.5.2'
    compile project(':dconnect-server-nano-httpd')
    androidTestCompile 'com.android.support:support-annotations:26.1.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    compile project(':dconnect-device-plugin-host')
    compileOnly 'com.google.android.things:androidthings:+'
}

android.testVariants.all { variant ->
    task("generateJavadocForManagerJUnit", type: Javadoc, overwrite: true) {
        title = "Android Device Connect Manager Unit Test"
        description = "Generates Javadoc for JUnit"
        source = variant.javaCompiler.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompiler.classpath) + files(ext.androidJar)
        destinationDir = new File("${project.getRootDir()}/DeviceConnectManager-JUnit-Javadoc/")

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PUBLIC)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/org/deviceconnect/android/test/**'
        exclude '**/org/deviceconnect/android/test/http/**'
        exclude '**/IntentDConnectTestCase.java'
        exclude '**/RESTfulDConnectTestCase.java'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}