apply plugin: 'com.android.library'
repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.nanohttpd:nanohttpd-websocket:2.3.0'
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

project.ext {
    if (android.hasProperty('applicationVariants')) {
        androidVariants = android.applicationVariants;
    } else {
        androidVariants = android.libraryVariants;
    }
}

project.androidVariants.all { variant ->
    task("generateJavadocForSDK", type: Javadoc, overwrite: true) {
        title = "Device Connect SDK for Android"
        description = "Generates Javadoc for $variant.name."
        source = android.sourceSets.main.java.sourceFiles
        configurations.implementation.setCanBeResolved(true)
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.implementation
        destinationDir = new File("${project.getRootDir()}/DeviceConnectSDK-Javadoc/")

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PROTECTED)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

}

android.testVariants.all { variant ->
    task("generateJavadocForSDKJUnit", type: Javadoc, overwrite: true) {
        title = "Android Device Connect SDK Unit Test"
        description = "Generates Javadoc for JUnit"
        configurations.implementation.setCanBeResolved(true)
        source = android.sourceSets.androidTest.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.implementation
        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PUBLIC)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }
        exclude '**/org/deviceconnect/message/server/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

def repo = new File(rootDir, "repository")

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = '2.3.2'
            pom.groupId = 'org.deviceconnect'
            pom.artifactId = 'dconnect-sdk-for-android'
        }
    }
}
