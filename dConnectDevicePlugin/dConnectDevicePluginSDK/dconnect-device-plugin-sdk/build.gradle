apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName '2.6.1'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}


project.ext {
    if (android.hasProperty('applicationVariants')) {
        androidVariants = android.applicationVariants
    } else {
        androidVariants = android.libraryVariants
    }
}

project.androidVariants.all { variant ->
    task("generateJavadocForPlugin", type: Javadoc, overwrite: true) {
        title = "Device Plug-in SDK for Android"
        description = "Generates Javadoc for $variant.name."
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
        destinationDir = new File("${project.getRootDir()}/DevicePluginSDK-Javadoc/")

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PROTECTED)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/localoauth/**'
        exclude '**/org/deviceconnect/android/compat/**'
        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/org/restlet/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

repositories {
    maven { url 'https://raw.githubusercontent.com/DeviceConnect/DeviceConnect-Android/master/dConnectSDK/dConnectSDKForAndroid/repository/' }
    maven { url 'file://' + rootDir + '/../../dConnectSDK/dConnectSDKForAndroid/repository/' }
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'org.deviceconnect:dconnect-sdk-for-android:2.3.1'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.46'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

// プラグインSDKのバージョンをpluginsdk.xmlに反映
task setPluginSDKVersion(type: Copy) {
    from 'src/template/pluginsdk.xml'
    into 'src/main/res/xml'
    expand([
            version: android.defaultConfig.versionName
    ])
}
preBuild.dependsOn setPluginSDKVersion

// DeviceConnect-Specからjsonファイルをダウンロード

def specOutputDir = file("${projectDir}/src/main/assets/")
def specZipFile = ''
def apiDir = new File(specOutputDir, 'api')

task downloadZip(type: SpecDownload) {
    sourceUrl = 'https://github.com/DeviceConnect/DeviceConnect-Spec/archive/master.zip'
    target = file("${projectDir}/master.zip")
    specZipFile = target
}

task unzip(type: Copy) {
    from zipTree(specZipFile)
    into specOutputDir
    exclude '**/README.md'
    exclude '**/LICENSE'
    exclude '**/.DS_Store'
}

task downloadDeviceConnectSpec {
    doLast {
        // zipをダウンロード
        tasks.downloadZip.execute()

        if (!specZipFile.exists()) {
            println 'Failed to download a zip file.'
        } else {
            // assets/api以下を削除
            if (apiDir.exists()) {
                delete(apiDir)
            }

            // zipを解凍
            tasks.unzip.execute()

            // zipを行うと不要なフォルダが作成されてしまうので、削除
            def specRootDir = specOutputDir.listFiles(new FilenameFilter() {
                boolean accept(File dir, String name) {
                    return name.startsWith("DeviceConnect-Spec") && new File(dir, name).isDirectory()
                }
            })[0]
            def apiRootDir = specRootDir.listFiles(new FilenameFilter() {
                boolean accept(File dir, String name) {
                    return "api" == name && new File(dir, name).isDirectory()
                }
            })[0]
            apiRootDir.renameTo(apiDir)

            // 不要になったzipやフォルダを削除
            specRootDir.delete()
            specZipFile.delete()
        }
    }
}

class SpecDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

// apiフォルダが存在しない場合にはDeviceConnect-Specをダウンロード
if (!apiDir.exists()) {
    tasks.downloadDeviceConnectSpec.execute()
}




def repo = new File(rootDir, "repository")

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = android.defaultConfig.versionName
            pom.groupId = 'org.deviceconnect'
            pom.artifactId = 'dconnect-device-plugin-sdk'
        }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
