apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.0'

    def getVersionName = { ->
        def version
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            version = ["cmd", "/c", "git describe --tags"].execute().in.text.trim()
        } else {
            version = ["sh", "-c", "git describe --tags"].execute().in.text.trim()
        }
        version = version.empty ? "2.0.0" : version
        return "${version}"
    }

    defaultConfig {
        applicationId "org.deviceconnect.android.manager"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    signingConfigs {
        releaseConfig {
            storeFile=file(project.properties.storeFile)
            storePassword=project.properties.storePassword
            keyAlias=project.properties.keyAlias
            keyPassword=project.properties.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig
        }
    }

    productFlavors {
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':dconnect-device-plugin-sdk')
    compile project(':dconnect-server-nano-httpd')
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
}

android.testVariants.all { variant ->
    task("generateJavadocForJUnit", type: Javadoc, overwrite: true) {
        title = "Android Device Connect Manager Unit Test"
        description = "Generates Javadoc for JUnit"
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options {
            links("http://docs.oracle.com/javase/jp/8/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PUBLIC)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

        exclude '**/org/deviceconnect/android/logger/**'
        exclude '**/org/deviceconnect/android/test/**'
        exclude '**/IntentDConnectTestCase.java'
        exclude '**/RESTfulDConnectTestCase.java'
        exclude '**/TestURIBuilder.java'
        exclude '**/*Constants.java'
        exclude '**/Util.java'
        exclude '**/HttpUtil.java'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}